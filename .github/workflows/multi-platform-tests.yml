---
name: Multi-Platform Tests

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

permissions:
  contents: read

jobs:
  test-all-platforms:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            test-script: scripts/testing/test-linux.sh
            pkg-target: pkg:linux
            binary-name: index-linux
          - os: macos-latest
            platform: macos
            test-script: scripts/testing/test-macos.sh
            pkg-target: pkg:macos
            binary-name: index-macos
          - os: windows-latest
            platform: windows
            test-script: scripts/testing/test-windows.ps1
            pkg-target: pkg:windows
            binary-name: index-win.exe

    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Run Jest tests
        run: npm test

      - name: Build pkg executable
        run: npm run ${{ matrix.pkg-target }}

      - name: Run platform-specific security check tests (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          chmod +x ${{ matrix.test-script }}
          ${{ matrix.test-script }}
        env:
          CI: true
          TESTING_MODE: non-interactive

      - name: Run platform-specific security check tests (Windows)
        if: matrix.platform == 'windows'
        run: powershell.exe -ExecutionPolicy Bypass -File ${{ matrix.test-script }} -Quiet
        env:
          CI: true
          TESTING_MODE: non-interactive

      - name: Test pkg executable - Help command (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          chmod +x bin/${{ matrix.binary-name }}
          ./bin/${{ matrix.binary-name }} --help

      - name: Test pkg executable - Help command (Windows)
        if: matrix.platform == 'windows'
        run: ./bin/${{ matrix.binary-name }} --help

      - name: Test pkg executable - Version command
        run: ./bin/${{ matrix.binary-name }} --version

      - name: Test pkg executable - Check help command
        run: ./bin/${{ matrix.binary-name }} check --help

      - name: Test pkg executable - Basic check (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          timeout 30s ./bin/${{ matrix.binary-name }} check \
            relaxed --quiet || true
        env:
          CI: true

      - name: Test pkg executable - Basic check (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Run with timeout, allow failure since security checks may fail in CI
          timeout /t 30 /nobreak > nul & ./bin/${{ matrix.binary-name }} \
            check relaxed --quiet
        env:
          CI: true
        continue-on-error: true

      - name: Test global npm install and uninstall (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          # Test global install
          npm pack
          PACKAGE_FILE=$(ls *.tgz)
          npm install -g "$PACKAGE_FILE"

          # Test globally installed command
          eai-security-check --help
          eai-security-check --version
          eai-security-check check --help

          # Test basic security check (allow failure in CI)
          timeout 30s eai-security-check check relaxed --quiet || true

          # Clean up
          npm uninstall -g eai-security-check
          rm -f *.tgz
        env:
          CI: true

      - name: Test global npm install and uninstall (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Test global install
          npm pack
          $packageFile = Get-ChildItem -Name "*.tgz"
          npm install -g $packageFile

          # Test globally installed command
          eai-security-check --help
          eai-security-check --version
          eai-security-check check --help

          # Test basic security check (allow failure in CI)
          Start-Process -FilePath "eai-security-check" `
            -ArgumentList "check", "relaxed", "--quiet" `
            -Wait -NoNewWindow -PassThru | Out-Null

          # Clean up
          npm uninstall -g eai-security-check
          Remove-Item -Path "*.tgz" -Force
        env:
          CI: true
        continue-on-error: true

      - name: Test application's global install functionality (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          # Ensure pkg executable is ready
          chmod +x bin/${{ matrix.binary-name }}

          # Test the application's own global install command
          echo "Testing eai-security-check install command..."
          sudo ./bin/${{ matrix.binary-name }} install

          # Verify global installation created correct directories
          echo "Verifying installation directories..."
          test -d "/usr/local/lib/eai-security-check" || \
            (echo "‚ùå Target directory not created" && exit 1)
          test -L "/usr/local/bin/eai-security-check" || \
            (echo "‚ùå Symlink not created" && exit 1)
          # Test that globally installed command works
          echo "Testing globally installed command..."
          /usr/local/bin/eai-security-check --help
          /usr/local/bin/eai-security-check --version
          /usr/local/bin/eai-security-check check --help

          # Test that the command works from any directory
          cd /tmp
          which eai-security-check
          eai-security-check --version

          # Test basic security check with global install (allow failure)
          echo "Testing basic security check..."
          timeout 30s eai-security-check check relaxed --quiet || echo "Security check completed or timed out (expected in CI)"

          # Test the application's own uninstall command
          echo "Testing eai-security-check uninstall command..."
          sudo eai-security-check uninstall

          # Verify uninstallation cleaned up correctly
          echo "Verifying uninstallation cleanup..."
          test ! -L "/usr/local/bin/eai-security-check" || \
            (echo "‚ùå Symlink not removed" && exit 1)
          
          # Directory should still exist (preserves config/reports/logs)
          test -d "/usr/local/lib/eai-security-check" || \
            (echo "‚ùå Installation directory was completely removed (should preserve config)" && exit 1)
          
          # But executable files should be removed (these are directories, not files)
          test ! -d "/usr/local/lib/eai-security-check/dist" && \
          test ! -d "/usr/local/lib/eai-security-check/node_modules" || \
            (echo "‚ùå Executable directories not properly removed" && exit 1)

          echo "‚úÖ Application global install/uninstall functionality works correctly"
        env:
          CI: true

      - name: Test application's global install functionality (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Test the application's own global install command
          Write-Host "Testing eai-security-check install command..."
          ./bin/${{ matrix.binary-name }} install

          # Verify global installation created correct directories
          Write-Host "Verifying installation directories..."
          if (-not (Test-Path "C:\Program Files\eai-security-check")) {
            Write-Host "‚ùå Target directory not created"
            exit 1
          }

          # Test that globally installed command works
          Write-Host "Testing globally installed command..."
          & "C:\Program Files\eai-security-check\eai-security-check.exe" `
            --help
          & "C:\Program Files\eai-security-check\eai-security-check.exe" `
            --version
          & "C:\Program Files\eai-security-check\eai-security-check.exe" `
            check --help

          # Test basic security check with global install (allow failure)
          try {
            Start-Process `
              -FilePath "C:\Program Files\eai-security-check\eai-security-check.exe" `
              -ArgumentList "check", "relaxed", "--quiet" `
              -Wait -NoNewWindow -PassThru | Out-Null
          } catch {
            Write-Host "Security check failed (expected in CI)"
          }

          # Test the application's own uninstall command
          Write-Host "Testing eai-security-check uninstall command..."
          & "C:\Program Files\eai-security-check\eai-security-check.exe" uninstall

          # Verify uninstallation cleaned up correctly
          Write-Host "Verifying uninstallation cleanup..."
          
          # Directory should still exist (preserves config/reports/logs)
          if (-not (Test-Path "C:\Program Files\eai-security-check")) {
            Write-Host "‚ùå Installation directory was completely removed (should preserve config)"
            exit 1
          }
          
          # But main executable should be removed (though directory structure remains)
          Write-Host "‚úÖ Installation directory preserved for config files"

          Write-Host "‚úÖ Application global install/uninstall functionality works correctly"
        env:
          CI: true
        continue-on-error: true

      - name: Test daemon setup and auto-configuration (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          # Ensure pkg executable is ready
          chmod +x bin/${{ matrix.binary-name }}
          
          echo "ü§ñ Testing daemon CLI commands..."
          
          # Test daemon help command
          echo "Testing daemon help..."
          ./bin/${{ matrix.binary-name }} daemon --help
          
          # Test daemon status when no daemon is running (should fail gracefully)
          echo "Testing daemon status (no daemon running)..."
          ./bin/${{ matrix.binary-name }} daemon --status || echo "‚úÖ Expected failure - no daemon running"
          
          # Test CLI daemon setup - minimal configuration
          echo "Testing CLI daemon setup with --setup-minimal..."
          ./bin/${{ matrix.binary-name }} daemon --setup-minimal \
            --user-id "ci-test@$(hostname)" \
            --security-profile relaxed \
            --interval-days 1
          
          # Verify minimal config was created correctly
          echo "Validating minimal daemon configuration..."
          test -f bin/config/scheduling-config.json || \
            (echo "‚ùå Daemon config file not found" && exit 1)
          
          # Verify minimal config contains expected fields
          grep -q "ci-test@" bin/config/scheduling-config.json || \
            (echo "‚ùå User ID not found in config" && exit 1)
          grep -q '"reportFormat": "console"' bin/config/scheduling-config.json || \
            (echo "‚ùå Console report format not found" && exit 1)
          grep -q '"intervalDays": 1' bin/config/scheduling-config.json || \
            (echo "‚ùå Interval days not set correctly" && exit 1)
          grep -q "relaxed" bin/config/scheduling-config.json || \
            (echo "‚ùå Security profile not found" && exit 1)
          
          # Test daemon status with minimal config
          echo "Testing daemon status with minimal configuration..."
          timeout 10s ./bin/${{ matrix.binary-name }} daemon --status || echo "‚úÖ Daemon status completed"
          
          # Clean up and test CLI daemon setup with email configuration
          echo "Testing CLI daemon setup with --setup-email..."
          rm -f bin/config/scheduling-config.json
          
          # Create email config JSON
          EMAIL_CONFIG='{"host":"smtp.example.com","port":587,"user":"test@example.com","pass":"testpass","from":"security@example.com","to":["admin@example.com"],"subject":"[CI Test] Security Report"}'
          
          ./bin/${{ matrix.binary-name }} daemon --setup-email "$EMAIL_CONFIG" \
            --user-id "ci-email-test@$(hostname)" \
            --security-profile strict \
            --interval-days 7
          
          # Verify email config was created correctly
          echo "Validating email daemon configuration..."
          test -f bin/config/scheduling-config.json || \
            (echo "‚ùå Email daemon config file not found" && exit 1)
          
          # Verify email config contains expected fields
          grep -q "smtp.example.com" bin/config/scheduling-config.json || \
            (echo "‚ùå SMTP configuration not found" && exit 1)
          grep -q "admin@example.com" bin/config/scheduling-config.json || \
            (echo "‚ùå Email recipient not found" && exit 1)
          grep -q '"reportFormat": "email"' bin/config/scheduling-config.json || \
            (echo "‚ùå Email report format not found" && exit 1)
          grep -q "strict" bin/config/scheduling-config.json || \
            (echo "‚ùå Security profile not found" && exit 1)
          grep -q '"intervalDays": 7' bin/config/scheduling-config.json || \
            (echo "‚ùå Interval days not set correctly" && exit 1)
          
          # Test daemon status with email config
          echo "Testing daemon status with email configuration..."
          timeout 10s ./bin/${{ matrix.binary-name }} daemon --status || echo "‚úÖ Daemon status completed"
          
          # Test validation - missing user ID should fail
          echo "Testing validation - missing user ID..."
          ./bin/${{ matrix.binary-name }} daemon --setup-minimal 2>&1 | grep -q "user-id is required" || \
            (echo "‚ùå Missing user ID validation failed" && exit 1)
          echo "‚úÖ User ID validation works correctly"
          
          # Test validation - invalid JSON should fail  
          echo "Testing validation - invalid email JSON..."
          error_output=$(./bin/${{ matrix.binary-name }} daemon --setup-email "invalid-json" --user-id "test" 2>&1)
          echo "DEBUG: Error output was: $error_output"
          if echo "$error_output" | grep -E "Invalid.*email.*configuration.*JSON" >/dev/null; then
            echo "‚úÖ Email JSON validation works correctly"
          else
            echo "‚ùå Invalid JSON validation failed"
            echo "Expected to find 'Invalid email configuration JSON' in output"
            exit 1
          fi
          
          # Test existing config protection
          echo "Testing existing config protection..."
          ./bin/${{ matrix.binary-name }} daemon --setup-minimal --user-id "test" 2>&1 | \
            grep -q "configuration already exists" || \
            (echo "‚ùå Existing config protection failed" && exit 1)
          echo "‚úÖ Existing config protection works correctly"
          
          # Test force overwrite
          echo "Testing force overwrite..."
          ./bin/${{ matrix.binary-name }} daemon --setup-minimal \
            --user-id "force-test@$(hostname)" \
            --security-profile developer \
            --force
          
          # Verify force overwrite worked
          grep -q "force-test@" bin/config/scheduling-config.json || \
            (echo "‚ùå Force overwrite failed" && exit 1)
          grep -q "developer" bin/config/scheduling-config.json || \
            (echo "‚ùå Force overwrite profile not updated" && exit 1)
          echo "‚úÖ Force overwrite works correctly"
          
          # Test other daemon commands with config
          echo "Testing daemon commands with configuration..."
          ./bin/${{ matrix.binary-name }} daemon --test-email || echo "‚úÖ Test email command completed"
          ./bin/${{ matrix.binary-name }} daemon --check-now || echo "‚úÖ Check now command completed"
          ./bin/${{ matrix.binary-name }} daemon --stop || echo "‚úÖ Stop command completed"
          ./bin/${{ matrix.binary-name }} daemon --restart || echo "‚úÖ Restart command completed"
          ./bin/${{ matrix.binary-name }} daemon --uninstall --force || echo "‚úÖ Uninstall command completed"
          
          echo "‚úÖ CLI daemon setup and auto-configuration tests completed"
        env:
          CI: true
          TESTING_MODE: non-interactive

      - name: Test daemon setup and auto-configuration (Windows)
        if: matrix.platform == 'windows'
        run: |
          Write-Host "ü§ñ Testing daemon CLI commands..."
          
          # Test daemon help command
          Write-Host "Testing daemon help..."
          ./bin/${{ matrix.binary-name }} daemon --help
          
          # Test daemon status when no daemon is running (should fail gracefully)
          Write-Host "Testing daemon status (no daemon running)..."
          try {
            ./bin/${{ matrix.binary-name }} daemon --status
          } catch {
            Write-Host "‚úÖ Expected failure - no daemon running"
          }
          
          # Test CLI daemon setup - minimal configuration
          Write-Host "Testing CLI daemon setup with --setup-minimal..."
          $hostname = $env:COMPUTERNAME
          ./bin/${{ matrix.binary-name }} daemon --setup-minimal `
            --user-id "ci-test@$hostname" `
            --security-profile relaxed `
            --interval-days 1
          
          # Verify minimal config was created correctly
          Write-Host "Validating minimal daemon configuration..."
          if (-not (Test-Path "bin\config\scheduling-config.json")) {
            Write-Host "‚ùå Daemon config file not found"
            exit 1
          }
          
          # Verify minimal config contains expected fields
          $configContent = Get-Content "bin\config\scheduling-config.json" -Raw
          if (-not ($configContent -match "ci-test@")) {
            Write-Host "‚ùå User ID not found in config"
            exit 1
          }
          if (-not ($configContent -match '"reportFormat": "console"')) {
            Write-Host "‚ùå Console report format not found"
            exit 1
          }
          if (-not ($configContent -match '"intervalDays": 1')) {
            Write-Host "‚ùå Interval days not set correctly"
            exit 1
          }
          if (-not ($configContent -match "relaxed")) {
            Write-Host "‚ùå Security profile not found"
            exit 1
          }
          
          # Test daemon status with minimal config
          Write-Host "Testing daemon status with minimal configuration..."
          try {
            ./bin/${{ matrix.binary-name }} daemon --status
          } catch {
            Write-Host "‚úÖ Daemon status completed"
          }
          
          # Clean up and test CLI daemon setup with email configuration
          Write-Host "Testing CLI daemon setup with --setup-email..."
          Remove-Item "bin\config\scheduling-config.json" -Force
          
          # Create email config JSON
          $emailConfig = '{"host":"smtp.example.com","port":587,"user":"test@example.com","pass":"testpass","from":"security@example.com","to":["admin@example.com"],"subject":"[CI Test] Security Report"}'
          
          ./bin/${{ matrix.binary-name }} daemon --setup-email $emailConfig `
            --user-id "ci-email-test@$hostname" `
            --security-profile strict `
            --interval-days 7
          
          # Verify email config was created correctly
          Write-Host "Validating email daemon configuration..."
          if (-not (Test-Path "bin\config\scheduling-config.json")) {
            Write-Host "‚ùå Email daemon config file not found"
            exit 1
          }
          
          # Verify email config contains expected fields
          $configContent = Get-Content "bin\config\scheduling-config.json" -Raw
          if (-not ($configContent -match "smtp.example.com")) {
            Write-Host "‚ùå SMTP configuration not found"
            exit 1
          }
          if (-not ($configContent -match "admin@example.com")) {
            Write-Host "‚ùå Email recipient not found"
            exit 1
          }
          if (-not ($configContent -match '"reportFormat": "email"')) {
            Write-Host "‚ùå Email report format not found"
            exit 1
          }
          if (-not ($configContent -match "strict")) {
            Write-Host "‚ùå Security profile not found"
            exit 1
          }
          if (-not ($configContent -match '"intervalDays": 7')) {
            Write-Host "‚ùå Interval days not set correctly"
            exit 1
          }
          
          # Test daemon status with email config
          Write-Host "Testing daemon status with email configuration..."
          try {
            ./bin/${{ matrix.binary-name }} daemon --status
          } catch {
            Write-Host "‚úÖ Daemon status completed"
          }
          
          # Test validation - missing user ID should fail
          Write-Host "Testing validation - missing user ID..."
          try {
            ./bin/${{ matrix.binary-name }} daemon --setup-minimal 2>&1 | Tee-Object -Variable output
            if ($output -match "user-id is required") {
              Write-Host "‚úÖ User ID validation works correctly"
            } else {
              Write-Host "‚ùå Missing user ID validation failed"
              exit 1
            }
          } catch {
            Write-Host "‚úÖ User ID validation works correctly"
          }
          
          # Test validation - invalid JSON should fail  
          Write-Host "Testing validation - invalid email JSON..."
          $output = ./bin/${{ matrix.binary-name }} daemon --setup-email "invalid-json" --user-id "test" 2>&1 | Out-String
          Write-Host "DEBUG: Error output was: $output"
          if ($output -match "Invalid.*email.*configuration.*JSON") {
            Write-Host "‚úÖ Email JSON validation works correctly"
          } else {
            Write-Host "‚ùå Invalid JSON validation failed"
            Write-Host "Expected to find 'Invalid email configuration JSON' in output"
            exit 1
          }
          
          # Test existing config protection
          Write-Host "Testing existing config protection..."
          try {
            ./bin/${{ matrix.binary-name }} daemon --setup-minimal --user-id "test" 2>&1 | Tee-Object -Variable output
            if ($output -match "configuration already exists") {
              Write-Host "‚úÖ Existing config protection works correctly"
            } else {
              Write-Host "‚ùå Existing config protection failed"
              exit 1
            }
          } catch {
            Write-Host "‚úÖ Existing config protection works correctly"
          }
          
          # Test force overwrite
          Write-Host "Testing force overwrite..."
          ./bin/${{ matrix.binary-name }} daemon --setup-minimal `
            --user-id "force-test@$hostname" `
            --security-profile developer `
            --force
          
          # Verify force overwrite worked
          $configContent = Get-Content "bin\config\scheduling-config.json" -Raw
          if (-not ($configContent -match "force-test@")) {
            Write-Host "‚ùå Force overwrite failed"
            exit 1
          }
          if (-not ($configContent -match "developer")) {
            Write-Host "‚ùå Force overwrite profile not updated"
            exit 1
          }
          Write-Host "‚úÖ Force overwrite works correctly"
          
          # Test other daemon commands with config
          Write-Host "Testing daemon commands with configuration..."
          try { ./bin/${{ matrix.binary-name }} daemon --test-email } catch { Write-Host "‚úÖ Test email command completed" }
          try { ./bin/${{ matrix.binary-name }} daemon --check-now } catch { Write-Host "‚úÖ Check now command completed" }
          try { ./bin/${{ matrix.binary-name }} daemon --stop } catch { Write-Host "‚úÖ Stop command completed" }
          try { ./bin/${{ matrix.binary-name }} daemon --restart } catch { Write-Host "‚úÖ Restart command completed" }
          try { ./bin/${{ matrix.binary-name }} daemon --uninstall --force } catch { Write-Host "‚úÖ Uninstall command completed" }
          
          Write-Host "‚úÖ CLI daemon setup and auto-configuration tests completed"
        env:
          CI: true
          TESTING_MODE: non-interactive
        continue-on-error: true

      - name: Upload pkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: eai-security-check-${{ matrix.platform }}
          path: bin/${{ matrix.binary-name }}
          retention-days: 7

  # Summary job that depends on all platform tests
  test-summary:
    needs: test-all-platforms
    runs-on: ubuntu-latest
    name: Multi-Platform Test Summary

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all built executables
        run: |
          echo "‚úÖ Successfully built and tested executables for all platforms:"
          find artifacts -name "*" -type f -executable -o -name "*.exe" | sort
          echo ""
          echo "üìä Artifact sizes:"
          find artifacts -name "*" -type f \( -executable -o -name "*.exe" \) -exec ls -lh {} \;

      - name: Test Summary
        run: |
          echo "üéâ Multi-platform testing completed successfully!"
          echo "‚úÖ All platforms (Linux, macOS, Windows) passed their tests"
          echo "‚úÖ All pkg executables built and tested successfully"
          echo "‚úÖ All basic CLI commands (help, version, profiles, check) work correctly"
