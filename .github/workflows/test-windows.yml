---
name: Windows Tests

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

permissions:
  contents: read

jobs:
  test-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check
        continue-on-error: true

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Build TypeScript
        run: npm run build

      - name: Run Jest tests
        run: npm test

      - name: Run Windows security check tests
        run: powershell.exe -ExecutionPolicy Bypass -File scripts/testing/test-windows.ps1 -Quiet
        env:
          CI: true
          TESTING_MODE: non-interactive

      - name: Build pkg executable for Windows
        run: npm run pkg:windows

      - name: Test pkg executable - Help command
        run: ./bin/index-win.exe --help

      - name: Test pkg executable - Version command
        run: ./bin/index-win.exe --version

      - name: Test pkg executable - Check help command
        run: ./bin/index-win.exe check --help

      - name: Test pkg executable - Basic check (non-interactive)
        run: |
          # Run with timeout, allow failure since security checks may fail in CI
          Start-Process -FilePath "./bin/index-win.exe" -ArgumentList "check", "relaxed", "--quiet" -Wait -NoNewWindow -PassThru | Out-Null
        env:
          CI: true
        continue-on-error: true

      - name: Test global npm install and uninstall
        run: |
          # Test global install
          npm pack
          $packageFile = Get-ChildItem -Name "*.tgz"
          npm install -g $packageFile

          # Test globally installed command
          eai-security-check --help
          eai-security-check --version
          eai-security-check check --help

          # Test basic security check (allow failure in CI)
          Start-Process -FilePath "eai-security-check" -ArgumentList "check", "relaxed", "--quiet" -Wait -NoNewWindow -PassThru | Out-Null

          # Clean up
          npm uninstall -g eai-security-check
          Remove-Item -Path "*.tgz" -Force
        env:
          CI: true
        continue-on-error: true

      - name: Test application's global install functionality
        run: |
          # Build and prepare the application
          npm run build

          # Test the application's own global install command
          Write-Host "Testing eai-security-check install command..."
          node dist/cli/index.js install

          # Verify global installation created correct directories
          Write-Host "Verifying installation directories..."
          if (-not (Test-Path "C:\Program Files\eai-security-check")) {
            Write-Host "‚ùå Target directory not created"
            exit 1
          }

          # Test that globally installed command works
          Write-Host "Testing globally installed command..."
          & "C:\Program Files\eai-security-check\eai-security-check.exe" --help
          & "C:\Program Files\eai-security-check\eai-security-check.exe" --version
          & "C:\Program Files\eai-security-check\eai-security-check.exe" check --help

          # Test basic security check with global install (allow failure)
          try {
            Start-Process -FilePath "C:\Program Files\eai-security-check\eai-security-check.exe" -ArgumentList "check", "relaxed", "--quiet" -Wait -NoNewWindow -PassThru | Out-Null
          } catch {
            Write-Host "Security check failed (expected in CI)"
          }

          # Test the application's own uninstall command
          Write-Host "Testing eai-security-check uninstall command..."
          & "C:\Program Files\eai-security-check\eai-security-check.exe" uninstall

          # Verify uninstallation cleaned up correctly
          Write-Host "Verifying uninstallation cleanup..."
          
          # Directory should still exist (preserves config/reports/logs)
          if (-not (Test-Path "C:\Program Files\eai-security-check")) {
            Write-Host "‚ùå Installation directory was completely removed (should preserve config)"
            exit 1
          }
          
          # But main executable should be removed (though directory structure remains)
          Write-Host "‚úÖ Installation directory preserved for config files"

          Write-Host "‚úÖ Application global install/uninstall functionality works correctly"
        env:
          CI: true
        continue-on-error: true

      - name: Test daemon setup and auto-configuration (Windows)
        run: |
          # Build and prepare the application
          npm run build
          
          Write-Host "ü§ñ Testing daemon CLI commands on Windows..."
          
          # Test daemon help command
          Write-Host "Testing daemon help..."
          node dist/cli/index.js daemon --help
          
          # Test daemon status when no daemon is running (should fail gracefully)
          Write-Host "Testing daemon status (no daemon running)..."
          try {
            node dist/cli/index.js daemon --status
          } catch {
            Write-Host "‚úÖ Expected failure - no daemon running"
          }
          
          # Create minimal scheduling config for testing
          Write-Host "Creating test daemon configuration..."
          New-Item -ItemType Directory -Force -Path "$env:APPDATA\eai-security-check"
          
          $config = @{
            enabled = $true
            intervalDays = 1
            email = @{
              smtp = @{
                host = "smtp.example.com"
                port = 587
                secure = $false
                auth = @{
                  user = "test@example.com"
                  pass = "testpass"
                }
              }
              from = "security@example.com"
              to = @("admin@example.com")
              subject = "[TEST] EAI Security Check Report"
            }
            reportFormat = "email"
            securityProfile = "relaxed"
            scp = @{
              enabled = $false
            }
          }
          
          $config | ConvertTo-Json -Depth 4 | Out-File -FilePath "$env:APPDATA\eai-security-check\scheduling-config.json"
          
          # Create security config as well (Windows-specific settings)
          Write-Host "Creating test security configuration..."
          $securityConfig = @{
            diskEncryption = @{
              required = $false
              timeoutSeconds = 5
            }
            passwordProtection = @{
              required = $false
              timeoutSeconds = 5
            }
            autoLock = @{
              enabled = $false
              maxMinutes = 15
              timeoutSeconds = 5
            }
            firewall = @{
              required = $false
              stealthMode = $false
              timeoutSeconds = 5
            }
            packageVerification = @{
              required = $false
              timeoutSeconds = 5
            }
            systemIntegrityProtection = @{
              required = $false
              timeoutSeconds = 5
            }
            remoteLogin = @{
              allowed = $true
              timeoutSeconds = 5
            }
            remoteManagement = @{
              allowed = $true
              timeoutSeconds = 5
            }
            automaticUpdates = @{
              required = $false
              timeoutSeconds = 5
            }
            fileSharing = @{
              allowed = $true
              timeoutSeconds = 5
            }
            screenSharing = @{
              allowed = $true
              timeoutSeconds = 5
            }
          }
          
          $securityConfig | ConvertTo-Json -Depth 4 | Out-File -FilePath "$env:APPDATA\eai-security-check\security-config.json"
          
          # Test daemon status with config (should show configuration details)
          Write-Host "Testing daemon status with configuration..."
          try {
            node dist/cli/index.js daemon --status
          } catch {
            Write-Host "‚úÖ Daemon status completed"
          }
          
          # Test daemon auto-configuration validation
          Write-Host "Validating daemon configuration was created correctly..."
          if (-not (Test-Path "$env:APPDATA\eai-security-check\scheduling-config.json")) {
            Write-Host "‚ùå Daemon config file not found"
            exit 1
          }
          
          # Verify config contains required fields
          $configContent = Get-Content "$env:APPDATA\eai-security-check\scheduling-config.json" -Raw
          if (-not ($configContent -match "smtp.example.com")) {
            Write-Host "‚ùå SMTP configuration not found"
            exit 1
          }
          if (-not ($configContent -match "admin@example.com")) {
            Write-Host "‚ùå Email recipient not found"
            exit 1
          }
          if (-not ($configContent -match "relaxed")) {
            Write-Host "‚ùå Security profile not found"
            exit 1
          }
          
          # Test daemon test-email (will fail due to fake SMTP but should handle gracefully)
          Write-Host "Testing daemon test-email (expected to fail gracefully)..."
          try {
            node dist/cli/index.js daemon --test-email
          } catch {
            Write-Host "‚úÖ Test email handled gracefully (expected SMTP failure)"
          }
          
          # Test daemon check now functionality (run immediate check)
          Write-Host "Testing daemon check-now (immediate security check)..."
          try {
            node dist/cli/index.js daemon --check-now
          } catch {
            Write-Host "‚úÖ Immediate check completed (expected to fail gracefully)"
          }
          
          # Test daemon stop (should handle no running daemon gracefully)
          Write-Host "Testing daemon stop (no daemon running)..."
          try {
            node dist/cli/index.js daemon --stop
          } catch {
            Write-Host "‚úÖ Expected - no daemon to stop"
          }
          
          # Test daemon restart (should handle no running daemon gracefully)
          Write-Host "Testing daemon restart (no daemon running)..."
          try {
            node dist/cli/index.js daemon --restart
          } catch {
            Write-Host "‚úÖ Expected - no daemon to restart"
          }
          
          # Test Windows-specific daemon service detection
          Write-Host "Testing Windows daemon service detection..."
          # Task Scheduler detection (should not find our test daemon)
          try {
            $task = Get-ScheduledTask -TaskName "EAI Security Check Daemon" -ErrorAction Stop
            Write-Host "‚ö†Ô∏è  Scheduled Task found (unexpected in test environment)"
          } catch {
            Write-Host "‚úÖ No Scheduled Task found (expected in test environment)"
          }
          
          # Test daemon uninstall
          Write-Host "Testing daemon uninstall..."
          try {
            node dist/cli/index.js daemon --uninstall --force
          } catch {
            Write-Host "‚úÖ Daemon uninstall completed"
          }
          
          # Validate uninstall cleaned up config files when forced
          Write-Host "Validating daemon uninstall cleanup..."
          if (Test-Path "$env:APPDATA\eai-security-check\scheduling-config.json") {
            Write-Host "‚ö†Ô∏è  Config file still exists after force uninstall (this is expected behavior)"
          }
          
          Write-Host "‚úÖ Windows daemon setup and auto-configuration tests completed"
        env:
          CI: true
          TESTING_MODE: non-interactive
        continue-on-error: true

      - name: Upload pkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: eai-security-check-windows
          path: bin/index-win.exe
          retention-days: 7
