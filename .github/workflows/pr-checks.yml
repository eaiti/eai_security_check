---
name: Linux Tests

"on":
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

permissions:
  contents: read

jobs:
  test-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check
        continue-on-error: true

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Build TypeScript
        run: npm run build

      - name: Run Jest tests
        run: npm test

      - name: Run Linux security check tests
        run: |
          chmod +x scripts/testing/test-linux.sh
          scripts/testing/test-linux.sh
        env:
          CI: true
          TESTING_MODE: non-interactive

      - name: Build pkg executable for Linux
        run: npm run pkg:linux

      - name: Test pkg executable - Help command
        run: |
          chmod +x bin/index-linux
          ./bin/index-linux --help

      - name: Test pkg executable - Version command
        run: ./bin/index-linux --version

      - name: Test pkg executable - Check help command
        run: ./bin/index-linux check --help

      - name: Test pkg executable - Basic check (non-interactive)
        run: |
          timeout 30s ./bin/index-linux check relaxed --quiet || true
        env:
          CI: true

      - name: Test global npm install and uninstall
        run: |
          # Test global install
          npm pack
          PACKAGE_FILE=$(ls *.tgz)
          npm install -g "$PACKAGE_FILE"

          # Test globally installed command
          eai-security-check --help
          eai-security-check --version
          eai-security-check check --help

          # Test basic security check (allow failure in CI)
          timeout 30s eai-security-check check relaxed --quiet || true

          # Clean up
          npm uninstall -g eai-security-check
          rm -f *.tgz
        env:
          CI: true

      - name: Test application's global install functionality
        run: |
          # Ensure pkg executable is ready
          chmod +x bin/index-linux

          # Test the application's own global install command
          echo "Testing eai-security-check install command..."
          sudo ./bin/index-linux install

          # Verify global installation created correct directories
          echo "Verifying installation directories..."
          test -d "/usr/local/lib/eai-security-check" || \
            (echo "❌ Target directory not created" && exit 1)
          test -L "/usr/local/bin/eai-security-check" || \
            (echo "❌ Symlink not created" && exit 1)

          # Test that globally installed command works
          echo "Testing globally installed command..."
          /usr/local/bin/eai-security-check --help
          /usr/local/bin/eai-security-check --version
          /usr/local/bin/eai-security-check check --help

          # Test that the command works from any directory
          cd /tmp
          which eai-security-check
          eai-security-check --version

          # Test basic security check with global install (allow failure)
          echo "Testing basic security check..."
          timeout 30s eai-security-check check relaxed --quiet || echo "Security check completed or timed out (expected in CI)"

          # Test the application's own uninstall command
          echo "Testing eai-security-check uninstall command..."
          sudo eai-security-check uninstall

          # Verify uninstallation cleaned up correctly
          echo "Verifying uninstallation cleanup..."
          test ! -L "/usr/local/bin/eai-security-check" || \
            (echo "❌ Symlink not removed" && exit 1)
          
          # Directory should still exist (preserves config/reports/logs)
          test -d "/usr/local/lib/eai-security-check" || \
            (echo "❌ Installation directory was completely removed (should preserve config)" && exit 1)
          
          # But executable files should be removed (these are directories, not files)
          test ! -d "/usr/local/lib/eai-security-check/dist" && \
          test ! -d "/usr/local/lib/eai-security-check/node_modules" || \
            (echo "❌ Executable directories not properly removed" && exit 1)

          echo "✅ Application global install/uninstall functionality works correctly"
        env:
          CI: true

      - name: Test daemon setup and auto-configuration (Linux)
        run: |
          # Ensure pkg executable is ready
          chmod +x bin/index-linux
          
          echo "🤖 Testing daemon CLI commands on Linux..."
          
          # Test daemon help command
          echo "Testing daemon help..."
          ./bin/index-linux daemon --help
          
          # Test daemon status when no daemon is running (should fail gracefully)
          echo "Testing daemon status (no daemon running)..."
          ./bin/index-linux daemon --status || echo "✅ Expected failure - no daemon running"
          
          # Create minimal scheduling config for testing
          echo "Creating test daemon configuration..."
          mkdir -p ~/.config/eai-security-check
          cat > ~/.config/eai-security-check/scheduling-config.json << 'EOF'
          {
            "enabled": true,
            "intervalDays": 1,
            "email": {
              "smtp": {
                "host": "smtp.example.com",
                "port": 587,
                "secure": false,
                "auth": {
                  "user": "test@example.com",
                  "pass": "testpass"
                }
              },
              "from": "security@example.com",
              "to": ["admin@example.com"],
              "subject": "[TEST] EAI Security Check Report"
            },
            "reportFormat": "email",
            "securityProfile": "relaxed",
            "scp": {
              "enabled": false
            }
          }
          EOF
          
          # Create security config as well
          echo "Creating test security configuration..."
          cat > ~/.config/eai-security-check/security-config.json << 'EOF'
          {
            "diskEncryption": {
              "required": false,
              "timeoutSeconds": 5
            },
            "passwordProtection": {
              "required": false,
              "timeoutSeconds": 5
            },
            "autoLock": {
              "enabled": false,
              "maxMinutes": 15,
              "timeoutSeconds": 5
            },
            "firewall": {
              "required": false,
              "stealthMode": false,
              "timeoutSeconds": 5
            },
            "packageVerification": {
              "required": false,
              "timeoutSeconds": 5
            },
            "systemIntegrityProtection": {
              "required": false,
              "timeoutSeconds": 5
            },
            "remoteLogin": {
              "allowed": true,
              "timeoutSeconds": 5
            },
            "remoteManagement": {
              "allowed": true,
              "timeoutSeconds": 5
            },
            "automaticUpdates": {
              "required": false,
              "timeoutSeconds": 5
            },
            "fileSharing": {
              "allowed": true,
              "timeoutSeconds": 5
            },
            "screenSharing": {
              "allowed": true,
              "timeoutSeconds": 5
            }
          }
          EOF
          
          # Test daemon status with config (should show configuration details)
          echo "Testing daemon status with configuration..."
          timeout 10s ./bin/index-linux daemon --status || echo "✅ Daemon status completed"
          
          # Test daemon auto-configuration validation
          echo "Validating daemon configuration was created correctly..."
          test -f ~/.config/eai-security-check/scheduling-config.json || \
            (echo "❌ Daemon config file not found" && exit 1)
          
          # Verify config contains required fields
          grep -q "smtp.example.com" ~/.config/eai-security-check/scheduling-config.json || \
            (echo "❌ SMTP configuration not found" && exit 1)
          grep -q "admin@example.com" ~/.config/eai-security-check/scheduling-config.json || \
            (echo "❌ Email recipient not found" && exit 1)
          grep -q "relaxed" ~/.config/eai-security-check/scheduling-config.json || \
            (echo "❌ Security profile not found" && exit 1)
          
          # Test daemon test-email (will fail due to fake SMTP but should handle gracefully)
          echo "Testing daemon test-email (expected to fail gracefully)..."
          timeout 30s ./bin/index-linux daemon --test-email || echo "✅ Test email handled gracefully (expected SMTP failure)"
          
          # Test daemon check now functionality (run immediate check)
          echo "Testing daemon check-now (immediate security check)..."
          timeout 30s ./bin/index-linux daemon --check-now || echo "✅ Immediate check completed (expected to fail gracefully)"
          
          # Test daemon stop (should handle no running daemon gracefully)
          echo "Testing daemon stop (no daemon running)..."
          ./bin/index-linux daemon --stop || echo "✅ Expected - no daemon to stop"
          
          # Test daemon restart (should handle no running daemon gracefully)
          echo "Testing daemon restart (no daemon running)..."
          timeout 10s ./bin/index-linux daemon --restart || echo "✅ Expected - no daemon to restart"
          
          # Test daemon uninstall
          echo "Testing daemon uninstall..."
          ./bin/index-linux daemon --uninstall --force || echo "✅ Daemon uninstall completed"
          
          # Validate uninstall cleaned up config files when forced
          echo "Validating daemon uninstall cleanup..."
          if [ -f ~/.config/eai-security-check/scheduling-config.json ]; then
            echo "⚠️  Config file still exists after force uninstall (this is expected behavior)"
          fi
          
          echo "✅ Linux daemon setup and auto-configuration tests completed"
        env:
          CI: true
          TESTING_MODE: non-interactive

      - name: Upload pkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: eai-security-check-linux
          path: bin/index-linux
          retention-days: 7
