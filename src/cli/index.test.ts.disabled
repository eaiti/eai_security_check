import { jest } from '@jest/globals';

// Mock all external dependencies first, before any imports
jest.mock('@inquirer/prompts');
jest.mock('fs');
jest.mock('os');
jest.mock('path');
jest.mock('child_process');
jest.mock('../services/auditor');
jest.mock('../utils/platform-detector');
jest.mock('../config/config-manager');
jest.mock('../config/config-profiles');

// Import mocked modules after mocking
import { select, confirm, input } from '@inquirer/prompts';
import * as fs from 'fs';
import * as os from 'os';
import * as path from 'path';
import { exec } from 'child_process';
import { SecurityAuditor } from '../services/auditor';
import { PlatformDetector, Platform, PlatformInfo } from '../utils/platform-detector';
import { ConfigManager } from '../config/config-manager';
import { getConfigByProfile, isValidProfile } from '../config/config-profiles';
import { SecurityConfig, SecurityReport } from '../types';

// Create typed mocks
const mockSelect = select as jest.MockedFunction<typeof select>;
const mockConfirm = confirm as jest.MockedFunction<typeof confirm>;
const mockInput = input as jest.MockedFunction<typeof input>;
const mockFs = jest.mocked(fs);
const mockOs = jest.mocked(os);
const mockPath = jest.mocked(path);
const mockExec = exec as jest.MockedFunction<typeof exec>;
const mockSecurityAuditor = SecurityAuditor as jest.MockedClass<typeof SecurityAuditor>;
const mockPlatformDetector = PlatformDetector as jest.Mocked<typeof PlatformDetector>;
const mockConfigManager = ConfigManager as jest.Mocked<typeof ConfigManager>;
const mockGetConfigByProfile = getConfigByProfile as jest.MockedFunction<typeof getConfigByProfile>;
const mockIsValidProfile = isValidProfile as jest.MockedFunction<typeof isValidProfile>;

// Import the functions we want to test from the new modules
import { InteractiveHandlers } from './interactive-handlers';
import { SecurityOperations } from '../core/security-operations';
import { ConfigurationOperations } from '../core/configuration-operations';
import { DaemonOperations } from '../core/daemon-operations';
import { VerificationOperations } from '../core/verification-operations';

describe('CLI Interactive Mode', () => {
  const originalConsoleLog = console.log;
  const originalConsoleError = console.error;
  const originalProcessExit = process.exit;

  beforeEach(() => {
    jest.clearAllMocks();

    // Explicitly reset key mocks to ensure isolation
    if (mockSelect.mockReset) mockSelect.mockReset();
    if (mockConfirm.mockReset) mockConfirm.mockReset();
    if (mockInput.mockReset) mockInput.mockReset();

    // Mock console methods to prevent output during tests
    console.log = jest.fn();
    console.error = jest.fn();

    // Mock process.exit to prevent tests from actually exiting
    process.exit = jest.fn() as never;

    // Setup default mocks
    mockOs.homedir.mockReturnValue('/home/testuser');
    mockOs.platform.mockReturnValue('darwin');
    mockPath.resolve.mockImplementation((...paths) => paths.join('/'));
    mockPath.join.mockImplementation((...paths) => paths.join('/'));
    mockPath.dirname.mockReturnValue('/test/dir');

    mockFs.existsSync.mockReturnValue(true);
    mockFs.readFileSync.mockReturnValue(
      JSON.stringify({
        diskEncryption: { enabled: true },
        passwordProtection: { enabled: true, requirePasswordImmediately: true },
        autoLock: { maxTimeoutMinutes: 7 },
        firewall: { enabled: true, stealthMode: true },
        packageVerification: { enabled: true },
        systemIntegrityProtection: { enabled: true },
        remoteLogin: { enabled: false },
        remoteManagement: { enabled: false },
        automaticUpdates: { enabled: true },
        sharingServices: { fileSharing: false, screenSharing: false }
      })
    );
    mockFs.writeFileSync.mockImplementation(() => {});
    mockFs.mkdirSync.mockImplementation(() => {});
    mockFs.statSync.mockReturnValue({
      isDirectory: () => false,
      isFile: () => true,
      mtime: new Date(),
      size: 1024
    } as fs.Stats);
    mockFs.lstatSync.mockReturnValue({
      isDirectory: () => false,
      isFile: () => true,
      isSymbolicLink: () => false,
      mtime: new Date(),
      size: 1024
    } as fs.Stats);

    mockPlatformDetector.detectPlatform.mockResolvedValue({
      platform: Platform.MACOS,
      version: '14.5',
      isSupported: true,
      isApproved: true,
      warningMessage: undefined
    });

    mockIsValidProfile.mockReturnValue(true);
    mockGetConfigByProfile.mockReturnValue({
      diskEncryption: { enabled: true },
      passwordProtection: { enabled: true, requirePasswordImmediately: true },
      autoLock: { maxTimeoutMinutes: 7 },
      firewall: { enabled: true, stealthMode: true },
      packageVerification: { enabled: true },
      systemIntegrityProtection: { enabled: true },
      remoteLogin: { enabled: false },
      remoteManagement: { enabled: false },
      automaticUpdates: { enabled: true },
      sharingServices: { fileSharing: false, screenSharing: false }
    });

    // Mock ConfigManager methods
    mockConfigManager.ensureCentralizedDirectories.mockReturnValue({
      configDir: '/test/config',
      reportsDir: '/test/reports',
      logsDir: '/test/logs'
    });
    mockConfigManager.getSystemStatus.mockResolvedValue({
      globalInstall: {
        exists: false,
        isDifferentVersion: false,
        globalVersion: null,
        currentVersion: '1.0.0'
      },
      config: {
        configDirectory: '/test/config',
        reportsDirectory: '/test/reports',
        securityConfigExists: true,
        securityConfigPath: '/test/config/security-config.json',
        schedulingConfigExists: false,
        schedulingConfigPath: '/test/config/scheduling-config.json'
      },
      daemon: {
        isRunning: false,
        needsUpdate: false,
        daemonVersion: null,
        currentVersion: '1.0.0'
      }
    });
    mockConfigManager.getCurrentVersion.mockReturnValue('1.0.0');
    mockConfigManager.promptForSecurityProfile.mockResolvedValue('default');
    mockConfigManager.hasSecurityConfig.mockReturnValue(true);
    mockConfigManager.loadSecurityConfig.mockReturnValue({
      diskEncryption: { enabled: true }
    } as SecurityConfig);
    mockConfigManager.getConfigStatus.mockReturnValue({
      configDirectory: '/test/config',
      reportsDirectory: '/test/reports',
      securityConfigExists: true,
      securityConfigPath: '/test/config/security-config.json',
      schedulingConfigExists: false,
      schedulingConfigPath: '/test/config/scheduling-config.json'
    });
    mockConfigManager.createAllSecurityConfigs.mockImplementation(() => {
      // Mock implementation that doesn't throw
    });

    // Mock SecurityAuditor methods - simplified approach to avoid typing issues
    const mockAuditorMethods = {
      generateReport: jest.fn(),
      generateQuietReport: jest.fn(),
      auditSecurity: jest.fn(),
      checkVersionCompatibility: jest.fn()
    };

    (
      mockAuditorMethods.generateReport as jest.MockedFunction<() => Promise<string>>
    ).mockResolvedValue('Mock security report');
    (
      mockAuditorMethods.generateQuietReport as jest.MockedFunction<() => Promise<string>>
    ).mockResolvedValue('Mock quiet report');
    (
      mockAuditorMethods.auditSecurity as jest.MockedFunction<() => Promise<SecurityReport>>
    ).mockResolvedValue({
      timestamp: new Date().toISOString(),
      overallPassed: true,
      results: []
    });
    (
      mockAuditorMethods.checkVersionCompatibility as jest.MockedFunction<
        () => Promise<PlatformInfo>
      >
    ).mockResolvedValue({
      platform: Platform.MACOS,
      version: '14.5',
      isSupported: true,
      isApproved: true,
      warningMessage: undefined
    });

    // Mock additional ConfigManager methods
    mockConfigManager.promptForForceOverwrite.mockResolvedValue(true);
    mockConfigManager.createAllSecurityConfigs.mockImplementation(() => {});
    mockConfigManager.resetAllConfigurations.mockImplementation(() => {});
    mockConfigManager.promptForConfigReset.mockResolvedValue(true);
    mockConfigManager.hasSchedulingConfig.mockReturnValue(false);
    mockConfigManager.createSchedulingConfigInteractive.mockResolvedValue(undefined);
    mockConfigManager.promptForDaemonSetup.mockResolvedValue(true);
    mockConfigManager.copyDaemonServiceTemplates.mockReturnValue({
      templatesCopied: ['service.template'],
      instructions: ['Install instruction'],
      platform: 'Linux'
    });
    mockConfigManager.manageDaemon.mockResolvedValue(undefined);
    mockConfigManager.promptForGlobalInstall.mockResolvedValue(true);
    mockConfigManager.setupGlobalInstallation.mockResolvedValue(undefined);
    mockConfigManager.removeGlobalInstall.mockResolvedValue(undefined);
    mockConfigManager.isVersionUpgrade.mockReturnValue(false);
    mockConfigManager.getLastTrackedVersion.mockReturnValue('1.0.0');
    mockConfigManager.updateTrackedVersion.mockImplementation(() => {});
    mockConfigManager.getSchedulingConfigPath.mockReturnValue(
      '/test/config/scheduling-config.json'
    );

    // Add new mock methods for centralized file structure
    mockConfigManager.installGlobally.mockResolvedValue({
      success: true,
      message: 'Successfully installed globally',
      executablePath: '/usr/local/lib/eai-security-check/eai-security-check',
      symlinkPath: '/usr/local/bin/eai-security-check'
    });
    mockConfigManager.uninstallGlobally.mockResolvedValue({
      success: true,
      message: 'Successfully uninstalled'
    });
    mockConfigManager.updateApplication.mockResolvedValue({
      success: true,
      message: 'Successfully updated',
      oldVersion: '1.0.0',
      newVersion: '1.0.0'
    });

    // @ts-expect-error - Mock implementation complexity requires casting
    mockSecurityAuditor.mockImplementation(() => mockAuditorMethods as unknown as SecurityAuditor);

    // Mock child_process.exec
    mockExec.mockImplementation(((
      command: string,
      callback?: (error: Error | null, stdout: string, stderr: string) => void
    ) => {
      // Mock successful version check for global installation compatibility
      if (command.includes('--version')) {
        callback?.(null, '1.0.0', '');
      } else {
        callback?.(new Error('Command not found'), '', '');
      }
      return {} as ReturnType<typeof exec>;
    }) as typeof exec);

    // Mock default prompt responses
    mockSelect.mockResolvedValue('7'); // Default to exit
    mockConfirm.mockResolvedValue(false); // Default to no
    mockInput.mockResolvedValue('test-input');
  });

  afterEach(() => {
    console.log = originalConsoleLog;
    console.error = originalConsoleError;
    process.exit = originalProcessExit;
  });

  describe('Main Interactive Loop', () => {
    it('should display welcome message and system status', async () => {
      mockSelect.mockResolvedValueOnce('7'); // Exit immediately

      await runInteractiveMode();

      expect(console.log).toHaveBeenCalledWith(
        '🎛️  Welcome to EAI Security Check Interactive Management!\n'
      );
      expect(mockConfigManager.ensureCentralizedDirectories).toHaveBeenCalled();
      expect(mockConfigManager.getSystemStatus).toHaveBeenCalled();
      expect(mockConfigManager.getCurrentVersion).toHaveBeenCalled();
      expect(mockSelect).toHaveBeenCalled();
    });

    it('should handle user selecting exit option', async () => {
      mockSelect.mockResolvedValueOnce('7'); // Exit option

      await runInteractiveMode();

      expect(console.log).toHaveBeenCalledWith('👋 Thank you for using EAI Security Check!');
      expect(console.log).toHaveBeenCalledWith(
        '💡 You can always return to this menu with: eai-security-check interactive'
      );
    });

    it('should handle Ctrl+C gracefully', async () => {
      const exitError = new Error('User interrupted') as Error & { name: string };
      exitError.name = 'ExitPromptError';
      mockSelect.mockRejectedValueOnce(exitError);

      await runInteractiveMode();

      expect(console.log).toHaveBeenCalledWith('\n👋 Thank you for using EAI Security Check!');
    });

    it('should handle security check menu selection', async () => {
      mockSelect
        .mockResolvedValueOnce('1') // Security check menu
        .mockResolvedValueOnce('back'); // Exit submenu immediately
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to main menu

      await runInteractiveMode();

      expect(mockSelect).toHaveBeenCalledTimes(2);
    });
  });

  describe('Security Check Menu', () => {
    it('should handle interactive security check selection', async () => {
      mockSelect.mockResolvedValueOnce('1'); // Interactive security check
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu

      await showSecurityCheckMenu();

      expect(mockSelect).toHaveBeenCalledWith({
        message: 'Choose a security check option:',
        choices: expect.arrayContaining([
          expect.objectContaining({
            name: '1. Interactive Security Check - Select profile and options'
          }),
          expect.objectContaining({ name: '2. Quick Security Check - Use default profile' }),
          expect.objectContaining({ name: '3. Back to Main Menu' })
        ])
      });
      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
    });

    it('should handle quick security check selection', async () => {
      // Mock existsSync to return false initially but true after creation
      let configCreated = false;
      mockFs.existsSync.mockImplementation((path: fs.PathLike) => {
        if (typeof path === 'string' && path.includes('security-config.json')) {
          return configCreated;
        }
        return true;
      });

      // Mock createAllSecurityConfigs to set configCreated to true
      mockConfigManager.createAllSecurityConfigs.mockImplementation(() => {
        configCreated = true;
      });

      mockSelect.mockResolvedValueOnce('2'); // Quick security check
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu

      await showSecurityCheckMenu();

      expect(mockSelect).toHaveBeenCalled();
      expect(mockSecurityAuditor).toHaveBeenCalled();
    });

    it('should handle back to main menu', async () => {
      mockSelect.mockResolvedValueOnce('back');

      await showSecurityCheckMenu();

      expect(mockSelect).toHaveBeenCalledTimes(1);
    });
  });

  describe('Configuration Menu', () => {
    it('should handle setup/modify configurations', async () => {
      mockSelect.mockResolvedValueOnce('1'); // Setup/modify
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.hasSecurityConfig.mockReturnValue(false);

      await showConfigurationMenu();

      expect(mockSelect).toHaveBeenCalled();
      expect(mockConfigManager.hasSecurityConfig).toHaveBeenCalled();
      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
    });

    it('should handle view configuration status', async () => {
      mockSelect.mockResolvedValueOnce('2'); // View status
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.getConfigStatus.mockReturnValue({
        configDirectory: '/test/config',
        reportsDirectory: '/test/reports',
        securityConfigExists: true,
        securityConfigPath: '/test/config/security-config.json',
        schedulingConfigExists: false,
        schedulingConfigPath: '/test/config/scheduling-config.json'
      });

      await showConfigurationMenu();

      expect(mockConfigManager.getConfigStatus).toHaveBeenCalled();
    });

    it('should handle reset all configurations with confirmation', async () => {
      mockSelect
        .mockResolvedValueOnce('3') // Reset all
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.promptForConfigReset.mockResolvedValue(true);
      mockConfigManager.resetAllConfigurations.mockImplementation(() => {});

      await showConfigurationMenu();

      expect(mockConfigManager.promptForConfigReset).toHaveBeenCalled();
      expect(mockConfigManager.resetAllConfigurations).toHaveBeenCalled();
    });

    it('should handle reset cancellation', async () => {
      mockSelect.mockResolvedValueOnce('3'); // Reset all
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.promptForConfigReset.mockResolvedValue(false);

      await showConfigurationMenu();

      expect(mockConfigManager.promptForConfigReset).toHaveBeenCalled();
      expect(mockConfigManager.resetAllConfigurations).not.toHaveBeenCalled();
    });

    it('should handle existing configuration modification', async () => {
      mockSelect
        .mockResolvedValueOnce('1') // Setup/modify
        .mockResolvedValueOnce('2'); // Change default profile
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.hasSecurityConfig.mockReturnValue(true);
      mockConfigManager.promptForForceOverwrite.mockResolvedValue(true);
      mockConfigManager.createAllSecurityConfigs.mockImplementation(() => {});

      await showConfigurationMenu();

      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
      expect(mockConfigManager.promptForForceOverwrite).toHaveBeenCalled();
      expect(mockConfigManager.createAllSecurityConfigs).toHaveBeenCalled();
    });
  });

  describe('Daemon Menu', () => {
    it('should handle daemon setup', async () => {
      mockSelect.mockResolvedValueOnce('1'); // Setup daemon
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.hasSchedulingConfig.mockReturnValue(false);
      mockConfigManager.hasSecurityConfig.mockReturnValue(false); // Force security config setup
      mockConfigManager.promptForDaemonSetup.mockResolvedValueOnce(false); // Don't setup service to avoid complex flow

      await showDaemonMenu();

      expect(mockConfigManager.hasSchedulingConfig).toHaveBeenCalled();
      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
      expect(mockConfigManager.createSchedulingConfigInteractive).toHaveBeenCalled();
    }, 15000); // Increase timeout

    it('should handle daemon service management', async () => {
      mockSelect
        .mockResolvedValueOnce('2') // Manage service
        .mockResolvedValueOnce('1'); // Start daemon
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.hasSchedulingConfig.mockReturnValue(true); // Must have config to manage

      await showDaemonMenu();

      expect(mockConfigManager.manageDaemon).toHaveBeenCalledWith('start');
    });

    it('should handle daemon status view', async () => {
      mockSelect
        .mockResolvedValueOnce('3') // View status
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.hasSchedulingConfig.mockReturnValue(true); // Need config to call manageDaemon
      mockConfigManager.getSchedulingConfigPath.mockReturnValue(
        '/test/config/scheduling-config.json'
      );

      await showDaemonMenu();

      expect(mockConfigManager.manageDaemon).toHaveBeenCalledWith('status');
    });

    it('should handle daemon removal', async () => {
      mockSelect
        .mockResolvedValueOnce('4') // Remove daemon
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm
        .mockResolvedValueOnce(true) // Confirm removal
        .mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.hasSchedulingConfig.mockReturnValue(true);

      await showDaemonMenu();

      expect(mockConfigManager.hasSchedulingConfig).toHaveBeenCalled();
      expect(mockConfirm).toHaveBeenCalledWith({
        message: 'Are you sure?',
        default: false
      });
      expect(mockConfigManager.manageDaemon).toHaveBeenCalledWith('remove');
    });
  });

  describe('Global Menu', () => {
    it('should handle global installation', async () => {
      mockSelect
        .mockResolvedValueOnce('1') // Install globally
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu

      await showGlobalMenu();

      expect(mockConfigManager.installGlobally).toHaveBeenCalled();
    });

    it('should handle global update', async () => {
      mockSelect
        .mockResolvedValueOnce('2') // Update global
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu

      await showGlobalMenu();

      expect(mockConfigManager.updateApplication).toHaveBeenCalled();
    });

    it('should handle global removal', async () => {
      mockSelect
        .mockResolvedValueOnce('3') // Remove global
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm
        .mockResolvedValueOnce(false) // Don't cleanup data
        .mockResolvedValueOnce(true) // Confirm removal
        .mockResolvedValueOnce(false); // Don't continue to menu

      // Mock the new uninstallGlobally method
      mockConfigManager.uninstallGlobally.mockResolvedValue({
        success: true,
        message: 'Successfully uninstalled'
      });

      await showGlobalMenu();

      expect(mockConfirm).toHaveBeenCalledWith({
        message: 'Do you also want to remove all configuration files and data?',
        default: false
      });
      expect(mockConfirm).toHaveBeenCalledWith({
        message: 'Are you sure you want to uninstall (keeping configuration data)?',
        default: false
      });
      expect(mockConfigManager.uninstallGlobally).toHaveBeenCalledWith(false);
    });
  });

  describe('System Menu', () => {
    it('should handle detailed system info view', async () => {
      mockSelect
        .mockResolvedValueOnce('1') // View detailed info
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu

      await showSystemMenu();

      expect(mockConfigManager.getSystemStatus).toHaveBeenCalled();
      expect(mockPlatformDetector.detectPlatform).toHaveBeenCalled();
      expect(mockConfigManager.getCurrentVersion).toHaveBeenCalled();
    });

    it('should handle version update check', async () => {
      mockSelect
        .mockResolvedValueOnce('2') // Check updates
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockConfigManager.isVersionUpgrade.mockReturnValue(true);

      await showSystemMenu();

      expect(mockConfigManager.getCurrentVersion).toHaveBeenCalled();
      expect(mockConfigManager.isVersionUpgrade).toHaveBeenCalled();
      expect(mockConfigManager.getLastTrackedVersion).toHaveBeenCalled();
    });
  });

  describe('Verify Menu', () => {
    it('should handle local reports verification', async () => {
      mockSelect
        .mockResolvedValueOnce('1') // Verify local reports
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      // @ts-expect-error - Mock fs.readdirSync return type complexity
      mockFs.readdirSync.mockReturnValue([
        'security-report-1.txt',
        'security-report-2.txt'
      ] as unknown as fs.Dirent[]);

      await showVerifyMenu();

      expect(mockConfigManager.ensureCentralizedDirectories).toHaveBeenCalled();
      expect(mockFs.existsSync).toHaveBeenCalled();
    });

    it('should handle specific file verification', async () => {
      mockSelect
        .mockResolvedValueOnce('2') // Verify specific file
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockInput.mockResolvedValueOnce('/path/to/report.txt');

      await showVerifyMenu();

      expect(mockInput).toHaveBeenCalledWith({
        message: 'Enter the path to the file you want to verify:',
        validate: expect.any(Function)
      });
    });

    it('should handle directory verification', async () => {
      mockSelect
        .mockResolvedValueOnce('3') // Verify directory
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu
      mockInput.mockResolvedValueOnce('/path/to/reports');

      await showVerifyMenu();

      expect(mockInput).toHaveBeenCalledWith({
        message: 'Enter the path to the directory you want to verify:',
        validate: expect.any(Function)
      });
    });

    it('should handle invalid file path gracefully', async () => {
      mockSelect
        .mockResolvedValueOnce('2') // Verify specific file
        .mockResolvedValueOnce('back'); // Go back
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu

      const exitError = new Error('User cancelled') as Error & { name: string };
      exitError.name = 'ExitPromptError';
      mockInput.mockRejectedValueOnce(exitError);

      await showVerifyMenu();

      // Should handle the error gracefully without throwing
      expect(mockInput).toHaveBeenCalled();
    });
  });

  describe('Individual Interactive Functions', () => {
    it('should handle interactive security check with profile selection', async () => {
      // Mock existsSync to return false initially but true after creation
      let configCreated = false;
      mockFs.existsSync.mockImplementation((path: fs.PathLike) => {
        if (
          typeof path === 'string' &&
          (path.includes('strict-config.json') || path.includes('security-config.json'))
        ) {
          return configCreated;
        }
        return true;
      });

      // Mock createAllSecurityConfigs to set configCreated to true
      mockConfigManager.createAllSecurityConfigs.mockImplementation(() => {
        configCreated = true;
      });

      mockConfigManager.promptForSecurityProfile.mockResolvedValue('strict');

      await runInteractiveSecurityCheck();

      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
      expect(mockSecurityAuditor).toHaveBeenCalled();
    });

    it('should handle quick security check execution', async () => {
      // Mock existsSync to return false initially but true after creation
      let configCreated = false;
      mockFs.existsSync.mockImplementation((path: fs.PathLike) => {
        if (typeof path === 'string' && path.includes('security-config.json')) {
          return configCreated;
        }
        return true;
      });

      // Mock createAllSecurityConfigs to set configCreated to true
      mockConfigManager.createAllSecurityConfigs.mockImplementation(() => {
        configCreated = true;
      });

      await runQuickSecurityCheck();

      expect(mockSecurityAuditor).toHaveBeenCalled();
      expect(mockConfigManager.ensureCentralizedDirectories).toHaveBeenCalled();
    });

    it('should handle configuration setup for first time', async () => {
      mockConfigManager.hasSecurityConfig.mockReturnValue(false);
      mockConfigManager.promptForSecurityProfile.mockResolvedValue('strict');

      await setupOrModifyConfigurations();

      expect(mockConfigManager.hasSecurityConfig).toHaveBeenCalled();
      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
      expect(mockConfigManager.createAllSecurityConfigs).toHaveBeenCalled();
    });

    it('should handle configuration modification', async () => {
      mockConfigManager.hasSecurityConfig.mockReturnValue(true);
      mockSelect.mockResolvedValueOnce('2'); // Change default profile
      mockConfigManager.promptForForceOverwrite.mockResolvedValue(true);

      await setupOrModifyConfigurations();

      expect(mockConfigManager.hasSecurityConfig).toHaveBeenCalled();
      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
      expect(mockConfigManager.promptForForceOverwrite).toHaveBeenCalled();
      expect(mockConfigManager.createAllSecurityConfigs).toHaveBeenCalled();
    });

    it('should handle daemon automation setup', async () => {
      mockConfigManager.hasSchedulingConfig.mockReturnValue(false);
      mockConfigManager.hasSecurityConfig.mockReturnValue(false); // Override to force security config setup
      mockConfigManager.promptForDaemonSetup.mockResolvedValue(false); // Don't setup service to avoid complex flow
      mockConfigManager.copyDaemonServiceTemplates.mockReturnValue({
        templatesCopied: ['service.template'],
        instructions: ['Install instruction'],
        platform: 'Linux'
      });
      mockConfirm.mockResolvedValue(false); // Don't auto setup

      await setupDaemonAutomation();

      expect(mockConfigManager.hasSchedulingConfig).toHaveBeenCalled();
      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
      expect(mockConfigManager.createSchedulingConfigInteractive).toHaveBeenCalled();
      expect(mockConfigManager.promptForDaemonSetup).toHaveBeenCalled();
    }, 15000); // Add timeout

    it('should handle service setup with auto-setup', async () => {
      mockConfirm.mockResolvedValueOnce(true); // Accept auto-setup

      const result = await promptForAutoServiceSetup('Linux');

      expect(result).toBe(true);
      expect(mockConfirm).toHaveBeenCalledWith({
        message: 'Would you like me to attempt automatic service setup?',
        default: false
      });
    });

    it('should handle daemon automation with service setup when service is requested', async () => {
      mockConfigManager.hasSchedulingConfig.mockReturnValue(false);
      mockConfigManager.hasSecurityConfig.mockReturnValue(false);
      mockConfigManager.promptForDaemonSetup.mockResolvedValue(true); // User wants service setup
      mockConfigManager.getCurrentVersion.mockReturnValue('1.0.0');

      // Mock that global installation is compatible
      mockExec.mockImplementation(((
        command: string,
        callback?: (error: Error | null, stdout: string, stderr: string) => void
      ) => {
        if (command.includes('--version')) {
          callback?.(null, '1.0.0', ''); // Same version as current
        } else {
          callback?.(new Error('Command not found'), '', '');
        }
        return {} as ReturnType<typeof exec>;
      }) as typeof exec);

      await setupDaemonAutomation();

      expect(mockConfigManager.hasSchedulingConfig).toHaveBeenCalled();
      expect(mockConfigManager.promptForSecurityProfile).toHaveBeenCalled();
      expect(mockConfigManager.createSchedulingConfigInteractive).toHaveBeenCalled();
      expect(mockConfigManager.promptForDaemonSetup).toHaveBeenCalled();
    }, 15000);

    it('should handle daemon automation with reconfiguration', async () => {
      mockConfigManager.hasSchedulingConfig.mockReturnValue(true); // Already has config
      mockConfigManager.hasSecurityConfig.mockReturnValue(true);
      mockConfirm.mockResolvedValueOnce(true); // User wants to reconfigure
      mockConfigManager.promptForDaemonSetup.mockResolvedValue(false); // Don't setup service

      await setupDaemonAutomation();

      expect(mockConfigManager.hasSchedulingConfig).toHaveBeenCalled();
      expect(mockConfirm).toHaveBeenCalledWith({
        message: 'Do you want to reconfigure it?',
        default: false
      });
      expect(mockConfigManager.createSchedulingConfigInteractive).toHaveBeenCalled();
    }, 15000);

    it('should handle daemon automation cancellation when user declines reconfiguration', async () => {
      mockConfigManager.hasSchedulingConfig.mockReturnValue(true); // Already has config
      mockConfirm.mockResolvedValueOnce(false); // User doesn't want to reconfigure

      await setupDaemonAutomation();

      expect(mockConfigManager.hasSchedulingConfig).toHaveBeenCalled();
      expect(mockConfirm).toHaveBeenCalledWith({
        message: 'Do you want to reconfigure it?',
        default: false
      });
      // Should not proceed to create new config
      expect(mockConfigManager.createSchedulingConfigInteractive).not.toHaveBeenCalled();
    }, 15000);
  });

  describe('Error Handling', () => {
    it('should handle file system errors gracefully', async () => {
      mockFs.existsSync.mockReturnValue(false);
      mockFs.readFileSync.mockImplementation(() => {
        throw new Error('File not found');
      });

      // Test that config functions handle missing files gracefully
      const result = getConfigForProfile('nonexistent');
      expect(result).toBeDefined(); // Should fall back to generated config
    });

    it('should handle network/service errors gracefully', async () => {
      const mockErrorMethods = {
        generateReport: jest.fn(),
        generateQuietReport: jest.fn(),
        auditSecurity: jest.fn()
      };

      (
        mockErrorMethods.generateReport as jest.MockedFunction<() => Promise<string>>
      ).mockRejectedValue(new Error('Network error'));
      (
        mockErrorMethods.generateQuietReport as jest.MockedFunction<() => Promise<string>>
      ).mockRejectedValue(new Error('Network error'));
      (
        mockErrorMethods.auditSecurity as jest.MockedFunction<() => Promise<SecurityReport>>
      ).mockRejectedValue(new Error('Network error'));

      // @ts-expect-error - Mock implementation complexity requires casting
      mockSecurityAuditor.mockImplementation(() => mockErrorMethods as unknown as SecurityAuditor);

      // Test error handling in interactive functions
      try {
        await runQuickSecurityCheck();
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
      }
    });

    it('should handle invalid user input', async () => {
      mockInput.mockResolvedValueOnce(''); // Empty input

      // Test input validation in verify functions
      try {
        await verifySpecificFile();
        // Should handle empty input validation
        expect(mockInput).toHaveBeenCalled();
      } catch (error) {
        // Expected behavior for invalid input
        expect(error).toBeDefined();
      }
    });
  });

  describe('Menu Navigation', () => {
    it('should handle continue/return to menu prompts', async () => {
      mockSelect.mockResolvedValueOnce('2'); // Quick security check
      mockConfirm.mockResolvedValueOnce(false); // Don't continue to menu (exit)

      await showSecurityCheckMenu();

      expect(mockConfirm).toHaveBeenCalledWith({
        message: 'Would you like to return to the Security Check menu?',
        default: true
      });
    });

    it('should handle menu transitions correctly', async () => {
      // Test individual menu calls rather than the full interactive loop
      // since the main loop is complex with multiple async operations

      mockSelect.mockResolvedValueOnce('back');
      mockConfirm.mockResolvedValueOnce(false);

      await showSecurityCheckMenu();

      expect(mockSelect).toHaveBeenCalled();

      // Reset mocks for next menu test
      jest.clearAllMocks();
      mockSelect.mockResolvedValueOnce('back');
      mockConfirm.mockResolvedValueOnce(false);

      await showConfigurationMenu();

      expect(mockSelect).toHaveBeenCalled();
    });
  });
});
